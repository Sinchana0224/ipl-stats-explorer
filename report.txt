

##  IPL Match Stats Explorer – Project Report


###  1. Introduction

The Indian Premier League (IPL) is one of the most popular T20 cricket leagues globally, 
generating a massive amount of data with every match. This data offers rich opportunities for 
analysis—from player performance and team success rates to the impact of toss decisions. 
This project aims to build an interactive data analytics dashboard that helps users explore IPL statistics in an 
engaging and insightful way using Python and Streamlit.



### 2. Problem Statement

Despite the availability of IPL data, there is a lack of accessible, interactive platforms for fans, analysts, and researchers to:

* Easily explore match outcomes, team performance, and player stats.
* Visualize trends across seasons.
* Derive insights about game-changing factors like the toss.

The goal is to fill this gap by developing a responsive, user-friendly web application that allows IPL statistics to be explored interactively.



###  3. Objectives

* Load and clean IPL match and ball-by-ball data.
* Develop an interactive Streamlit-based dashboard.
* Provide filters for seasons and teams.
* Visualize:

  * Team win percentages.
  * Top batters and bowlers.
  * Toss influence on match outcomes.
*  Ensure the app is easy to use, visually appealing, and informative.
*  (Optional) Prepare for deployment on platforms like Streamlit Cloud.

---

###  4. Methodology

1. **Data Collection**: Used Kaggle’s official IPL dataset (2008–2020).
2. **Data Preprocessing**:

   * Loaded data using Pandas.
   * Normalized column names for consistency.
3. **Modular Design**:

   * Used `analysis.py` to contain all data logic.
   * Kept `ipl_app.py` focused on the Streamlit interface.
4. **Interactive Filtering**:

   * Sidebar filters for seasons and team selection.
5. **Visualization**:

   * Used Plotly for dynamic, zoomable charts.
   * Presented results with bar charts and metrics.

---

###  5. Implementation

####  App Features

| Feature              | Description                                       |
| -------------------- | ------------------------------------------------- |
| Team Win %           | Shows win % of teams in selected season(s).       |
| Top Run Scorers      | Displays batters with most cumulative runs.       |
| Top Wicket Takers    | Shows top bowlers by dismissals.                  |
| Toss Impact Analysis | Calculates % of times toss winner also won match. |

####  Project Structure

```
ipl-stats-explorer/
├── data/                  # Contains matches.csv, deliveries.csv
├── analysis.py            # Reusable functions for stats
├── ipl_app.py             # Streamlit front-end logic
├── .streamlit/config.toml # Theme customization
├── requirements.txt       # Dependency list
└── README.md              # Project documentation
```

####  User Interface (UI)

* Built using **Streamlit**.
* Sidebar filters.
* Plotly bar charts for visual output.
* Dark/light theme via `config.toml`.

---

### 6. Libraries & Tools Used

| Library          | Purpose                                   |
| ---------------- | ----------------------------------------- |
| `pandas`         | Data manipulation and preprocessing       |
| `streamlit`      | Web application framework                 |
| `plotly.express` | Interactive and attractive visualizations |
| `os` / `venv`    | Virtual environment & file management     |

---

### 7. Dataset Used

#### 🗂️ IPL Dataset from Kaggle:

**Link:** [https://www.kaggle.com/datasets/patrickb1912/ipl-complete-dataset-2008-2020](https://www.kaggle.com/datasets/patrickb1912/ipl-complete-dataset-2008-2020)

* `matches.csv`: Contains match-level data (team names, venue, winner, toss, etc.).
* `deliveries.csv`: Contains ball-by-ball data (batter, bowler, runs, wickets, etc.).

> Total Matches: \~800
> Total Deliveries: \~150,000+

---

### 8. Algorithms / Techniques (if any)

While no machine learning algorithms are used in this version, the following **data analysis techniques** are implemented:

* **GroupBy + Aggregation**: To compute total runs/wickets per player.
* **Filtering by Season/Team**: Using Pandas masks and multi-select widgets.
* **Normalization**: Column names normalized to lowercase to avoid errors.
* **Percentage Calculation**: Toss win impact = `(matches where toss winner also won) / total matches`.

---

### 9. Results

* Successfully created a fully interactive IPL Stats web app.
* Users can filter by season and team to see:

  * Win percentages.
  * Top run scorers and wicket takers.
  * Toss impact percentage.
* All visualizations are interactive, zoomable, and exportable.
* The app works smoothly on local and remote hosting (e.g., Streamlit Cloud).

---

### 10. Conclusion

This project demonstrates how **data science** and **modern web tools** like Streamlit can be combined to deliver real-time sports analytics in an engaging format. While the current version focuses on core statistics, the framework is extendable for advanced features such as:

* Match-by-match scorecards.
* Player comparisons.
* Predictive modeling (e.g., match winner prediction).

This app not only serves as a cricket analytics tool but also as a strong foundation for deeper sports data analysis.


### 📌 Optional Future Enhancements

* 🔍 Player and match search feature.
* 📈 Player career progression visualizations.
* 📊 Head-to-head team stats.
* 🔮 Predictive analytics (using ML models).
* ☁️ Full deployment with database backend and caching.
